//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class OnlineChatClient {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
    this.http = http;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
  }

  /**
   * @return Success
   */
  all(): Observable<UserViewModel[]> {
    let url_ = this.baseUrl + "/api/user/all";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAll(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAll(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserViewModel[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserViewModel[]>;
    }));
  }

  protected processAll(response: HttpResponseBase): Observable<UserViewModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(UserViewModel.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  promoteUser(body: number | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/user/promoteUser";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processPromoteUser(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processPromoteUser(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processPromoteUser(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @return Success
   */
  verify(): Observable<void> {
    let url_ = this.baseUrl + "/api/user/verify";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processVerify(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processVerify(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processVerify(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  auth(body: LoginDto | undefined): Observable<AuthenticateResponse> {
    let url_ = this.baseUrl + "/api/user/auth";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAuth(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAuth(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AuthenticateResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AuthenticateResponse>;
    }));
  }

  protected processAuth(response: HttpResponseBase): Observable<AuthenticateResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AuthenticateResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  register(body: RegisterDto | undefined): Observable<AuthenticateResponse> {
    let url_ = this.baseUrl + "/api/user/register";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
        "Accept": "text/plain"
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processRegister(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processRegister(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<AuthenticateResponse>;
        }
      } else
        return _observableThrow(response_) as any as Observable<AuthenticateResponse>;
    }));
  }

  protected processRegister(response: HttpResponseBase): Observable<AuthenticateResponse> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = AuthenticateResponse.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param chatId (optional)
   * @return Success
   */
  chatInfo(chatId: number | undefined): Observable<ChatInfo> {
    let url_ = this.baseUrl + "/api/chat/chatInfo?";
    if (chatId === null)
      throw new Error("The parameter 'chatId' cannot be null.");
    else if (chatId !== undefined)
      url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processChatInfo(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processChatInfo(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ChatInfo>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ChatInfo>;
    }));
  }

  protected processChatInfo(response: HttpResponseBase): Observable<ChatInfo> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ChatInfo.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  add(body: ContactOperationDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/contacts/add";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAdd(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAdd(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processAdd(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  delete(body: ContactOperationDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/contacts/delete";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processDelete(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processDelete(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processDelete(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param userId (optional)
   * @return Success
   */
  all2(userId: number | undefined): Observable<ContactModel[]> {
    let url_ = this.baseUrl + "/api/contacts/all?";
    if (userId === null)
      throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processAll2(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processAll2(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ContactModel[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ContactModel[]>;
    }));
  }

  protected processAll2(response: HttpResponseBase): Observable<ContactModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ContactModel.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param searchString (optional)
   * @return Success
   */
  search(searchString: string | undefined): Observable<ContactModel[]> {
    let url_ = this.baseUrl + "/api/contacts/search?";
    if (searchString === null)
      throw new Error("The parameter 'searchString' cannot be null.");
    else if (searchString !== undefined)
      url_ += "searchString=" + encodeURIComponent("" + searchString) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processSearch(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processSearch(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ContactModel[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ContactModel[]>;
    }));
  }

  protected processSearch(response: HttpResponseBase): Observable<ContactModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ContactModel.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param userId (optional)
   * @param chatId (optional)
   * @return Success
   */
  missingChatUsers(userId: number | undefined, chatId: number | undefined): Observable<ContactModel[]> {
    let url_ = this.baseUrl + "/api/contacts/missingChatUsers?";
    if (userId === null)
      throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    if (chatId === null)
      throw new Error("The parameter 'chatId' cannot be null.");
    else if (chatId !== undefined)
      url_ += "chatId=" + encodeURIComponent("" + chatId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processMissingChatUsers(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processMissingChatUsers(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<ContactModel[]>;
        }
      } else
        return _observableThrow(response_) as any as Observable<ContactModel[]>;
    }));
  }

  protected processMissingChatUsers(response: HttpResponseBase): Observable<ContactModel[]> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(ContactModel.fromJS(item));
        }
        else {
          result200 = <any>null;
        }
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param userId (optional)
   * @return Success
   */
  getUserInfo(userId: number | undefined): Observable<UserInfo> {
    let url_ = this.baseUrl + "/api/contacts/getUserInfo?";
    if (userId === null)
      throw new Error("The parameter 'userId' cannot be null.");
    else if (userId !== undefined)
      url_ += "userId=" + encodeURIComponent("" + userId) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_ : any = {
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Accept": "text/plain"
      })
    };

    return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processGetUserInfo(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processGetUserInfo(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<UserInfo>;
        }
      } else
        return _observableThrow(response_) as any as Observable<UserInfo>;
    }));
  }

  protected processGetUserInfo(response: HttpResponseBase): Observable<UserInfo> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UserInfo.fromJS(resultData200);
        return _observableOf(result200);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  updateAbout(body: UpdateAboutDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/profile/updateAbout";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUpdateAbout(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUpdateAbout(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUpdateAbout(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }

  /**
   * @param body (optional)
   * @return Success
   */
  uploadPhoto(body: UploadPhotoDto | undefined): Observable<void> {
    let url_ = this.baseUrl + "/api/profile/uploadPhoto";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_ : any = {
      body: content_,
      observe: "response",
      responseType: "blob",
      headers: new HttpHeaders({
        "Content-Type": "application/json",
      })
    };

    return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
      return this.processUploadPhoto(response_);
    })).pipe(_observableCatch((response_: any) => {
      if (response_ instanceof HttpResponseBase) {
        try {
          return this.processUploadPhoto(response_ as any);
        } catch (e) {
          return _observableThrow(e) as any as Observable<void>;
        }
      } else
        return _observableThrow(response_) as any as Observable<void>;
    }));
  }

  protected processUploadPhoto(response: HttpResponseBase): Observable<void> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse ? response.body :
        (response as any).error instanceof Blob ? (response as any).error : undefined;

    let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
    if (status === 200) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return _observableOf(null as any);
      }));
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      }));
    }
    return _observableOf(null as any);
  }
}

export class AuthenticateResponse implements IAuthenticateResponse {
  id?: number;
  username?: string | undefined;
  email?: string | undefined;
  token?: string | undefined;

  constructor(data?: IAuthenticateResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.email = _data["email"];
      this.token = _data["token"];
    }
  }

  static fromJS(data: any): AuthenticateResponse {
    data = typeof data === 'object' ? data : {};
    let result = new AuthenticateResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["email"] = this.email;
    data["token"] = this.token;
    return data;
  }
}

export interface IAuthenticateResponse {
  id?: number;
  username?: string | undefined;
  email?: string | undefined;
  token?: string | undefined;
}

export class ChatInfo implements IChatInfo {
  chatId?: number;
  chatName?: string | undefined;
  chatDescription?: string | undefined;
  members?: ChatMember[] | undefined;
  ownerId?: number;
  avatarUrl?: string | undefined;

  constructor(data?: IChatInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.chatId = _data["chatId"];
      this.chatName = _data["chatName"];
      this.chatDescription = _data["chatDescription"];
      if (Array.isArray(_data["members"])) {
        this.members = [] as any;
        for (let item of _data["members"])
          this.members!.push(ChatMember.fromJS(item));
      }
      this.ownerId = _data["ownerId"];
      this.avatarUrl = _data["avatarUrl"];
    }
  }

  static fromJS(data: any): ChatInfo {
    data = typeof data === 'object' ? data : {};
    let result = new ChatInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["chatId"] = this.chatId;
    data["chatName"] = this.chatName;
    data["chatDescription"] = this.chatDescription;
    if (Array.isArray(this.members)) {
      data["members"] = [];
      for (let item of this.members)
        data["members"].push(item.toJSON());
    }
    data["ownerId"] = this.ownerId;
    data["avatarUrl"] = this.avatarUrl;
    return data;
  }
}

export interface IChatInfo {
  chatId?: number;
  chatName?: string | undefined;
  chatDescription?: string | undefined;
  members?: ChatMember[] | undefined;
  ownerId?: number;
  avatarUrl?: string | undefined;
}

export class ChatMember implements IChatMember {
  userId?: number;
  userName?: string | undefined;
  avatarUrl?: string | undefined;

  constructor(data?: IChatMember) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.userName = _data["userName"];
      this.avatarUrl = _data["avatarUrl"];
    }
  }

  static fromJS(data: any): ChatMember {
    data = typeof data === 'object' ? data : {};
    let result = new ChatMember();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["userName"] = this.userName;
    data["avatarUrl"] = this.avatarUrl;
    return data;
  }
}

export interface IChatMember {
  userId?: number;
  userName?: string | undefined;
  avatarUrl?: string | undefined;
}

export class ContactModel implements IContactModel {
  userId?: number;
  userName?: string | undefined;
  photoUrl?: string | undefined;

  constructor(data?: IContactModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.userName = _data["userName"];
      this.photoUrl = _data["photoUrl"];
    }
  }

  static fromJS(data: any): ContactModel {
    data = typeof data === 'object' ? data : {};
    let result = new ContactModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["userName"] = this.userName;
    data["photoUrl"] = this.photoUrl;
    return data;
  }
}

export interface IContactModel {
  userId?: number;
  userName?: string | undefined;
  photoUrl?: string | undefined;
}

export class ContactOperationDto implements IContactOperationDto {
  userId?: number;
  contactId?: number;

  constructor(data?: IContactOperationDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.contactId = _data["contactId"];
    }
  }

  static fromJS(data: any): ContactOperationDto {
    data = typeof data === 'object' ? data : {};
    let result = new ContactOperationDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["contactId"] = this.contactId;
    return data;
  }
}

export interface IContactOperationDto {
  userId?: number;
  contactId?: number;
}

export class FileModel implements IFileModel {
  data?: string | undefined;
  name?: string | undefined;

  constructor(data?: IFileModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.data = _data["data"];
      this.name = _data["name"];
    }
  }

  static fromJS(data: any): FileModel {
    data = typeof data === 'object' ? data : {};
    let result = new FileModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["data"] = this.data;
    data["name"] = this.name;
    return data;
  }
}

export interface IFileModel {
  data?: string | undefined;
  name?: string | undefined;
}

export class LoginDto implements ILoginDto {
  nameOrEmail?: string | undefined;
  password?: string | undefined;

  constructor(data?: ILoginDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.nameOrEmail = _data["nameOrEmail"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): LoginDto {
    data = typeof data === 'object' ? data : {};
    let result = new LoginDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["nameOrEmail"] = this.nameOrEmail;
    data["password"] = this.password;
    return data;
  }
}

export interface ILoginDto {
  nameOrEmail?: string | undefined;
  password?: string | undefined;
}

export class RegisterDto implements IRegisterDto {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;

  constructor(data?: IRegisterDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.username = _data["username"];
      this.email = _data["email"];
      this.password = _data["password"];
    }
  }

  static fromJS(data: any): RegisterDto {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["username"] = this.username;
    data["email"] = this.email;
    data["password"] = this.password;
    return data;
  }
}

export interface IRegisterDto {
  username?: string | undefined;
  email?: string | undefined;
  password?: string | undefined;
}

export class UpdateAboutDto implements IUpdateAboutDto {
  userId?: number;
  about?: string | undefined;

  constructor(data?: IUpdateAboutDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.about = _data["about"];
    }
  }

  static fromJS(data: any): UpdateAboutDto {
    data = typeof data === 'object' ? data : {};
    let result = new UpdateAboutDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["about"] = this.about;
    return data;
  }
}

export interface IUpdateAboutDto {
  userId?: number;
  about?: string | undefined;
}

export class UploadPhotoDto implements IUploadPhotoDto {
  userId?: number;
  photo?: FileModel;

  constructor(data?: IUploadPhotoDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userId = _data["userId"];
      this.photo = _data["photo"] ? FileModel.fromJS(_data["photo"]) : <any>undefined;
    }
  }

  static fromJS(data: any): UploadPhotoDto {
    data = typeof data === 'object' ? data : {};
    let result = new UploadPhotoDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["userId"] = this.userId;
    data["photo"] = this.photo ? this.photo.toJSON() : <any>undefined;
    return data;
  }
}

export interface IUploadPhotoDto {
  userId?: number;
  photo?: FileModel;
}

export class UserInfo implements IUserInfo {
  id?: number;
  username?: string | undefined;
  about?: string | undefined;
  lastSeen?: Date;
  avatarUrl?: string | undefined;
  avatars?: string[] | undefined;

  constructor(data?: IUserInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.about = _data["about"];
      this.lastSeen = _data["lastSeen"] ? new Date(_data["lastSeen"].toString()) : <any>undefined;
      this.avatarUrl = _data["avatarUrl"];
      if (Array.isArray(_data["avatars"])) {
        this.avatars = [] as any;
        for (let item of _data["avatars"])
          this.avatars!.push(item);
      }
    }
  }

  static fromJS(data: any): UserInfo {
    data = typeof data === 'object' ? data : {};
    let result = new UserInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["about"] = this.about;
    data["lastSeen"] = this.lastSeen ? this.lastSeen.toISOString() : <any>undefined;
    data["avatarUrl"] = this.avatarUrl;
    if (Array.isArray(this.avatars)) {
      data["avatars"] = [];
      for (let item of this.avatars)
        data["avatars"].push(item);
    }
    return data;
  }
}

export interface IUserInfo {
  id?: number;
  username?: string | undefined;
  about?: string | undefined;
  lastSeen?: Date;
  avatarUrl?: string | undefined;
  avatars?: string[] | undefined;
}

export class UserViewModel implements IUserViewModel {
  id?: number;
  username?: string | undefined;
  email?: string | undefined;
  isAdmin?: boolean;

  constructor(data?: IUserViewModel) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.username = _data["username"];
      this.email = _data["email"];
      this.isAdmin = _data["isAdmin"];
    }
  }

  static fromJS(data: any): UserViewModel {
    data = typeof data === 'object' ? data : {};
    let result = new UserViewModel();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["id"] = this.id;
    data["username"] = this.username;
    data["email"] = this.email;
    data["isAdmin"] = this.isAdmin;
    return data;
  }
}

export interface IUserViewModel {
  id?: number;
  username?: string | undefined;
  email?: string | undefined;
  isAdmin?: boolean;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
  if (result !== null && result !== undefined)
    return _observableThrow(result);
  else
    return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next("");
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = event => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
